[{"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/index.js":"1","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/reportWebVitals.js":"2","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/App.js":"3","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/OptionTable.js":"4","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/getWeb3.js":"5","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/helpers.js":"6","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/Disguise.js":"7","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DisguiseControls.js":"8","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/MakePepito.js":"9","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DisguiseStore.js":"10","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DisguiseRetrieve.js":"11","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DrawAvataar.js":"12"},{"size":561,"mtime":1608486248232,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1608395041304,"results":"15","hashOfConfig":"14"},{"size":5449,"mtime":1611155050776,"results":"16","hashOfConfig":"14"},{"size":2223,"mtime":1610446745147,"results":"17","hashOfConfig":"14"},{"size":1696,"mtime":1610913133885,"results":"18","hashOfConfig":"14"},{"size":8274,"mtime":1609409183351,"results":"19","hashOfConfig":"14"},{"size":6130,"mtime":1610446745144,"results":"20","hashOfConfig":"14"},{"size":3198,"mtime":1611090554658,"results":"21","hashOfConfig":"14"},{"size":3733,"mtime":1611134755261,"results":"22","hashOfConfig":"14"},{"size":4665,"mtime":1611149180932,"results":"23","hashOfConfig":"14"},{"size":7632,"mtime":1611146825305,"results":"24","hashOfConfig":"14"},{"size":1315,"mtime":1610446745146,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1e630z9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/index.js",[],["55","56"],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/reportWebVitals.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/App.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/OptionTable.js",["57"],"/**  class OptionTable - project Pepito \n * @author Vu Tien Khang - Jan 2021\n * @notice display a table of disguise options\n * @dev will be upgraded to let the user select the options manually\n*/\nimport React from \"react\";\n// import { render } from \"react-dom\";\nimport ReactTable from \"react-table-6\";   // in npm library\nimport \"react-table-6/react-table.css\";   // (!) to be analysed\n\nclass OptionTable extends React.Component {\n    constructor(props) {\n        super(props);\n    };\n\n    render() {\n        /** @dev retrieve Pepito disguise options from this.props.disguise */\n        const {topType, hatColor, accessoriesType, hairColor, facialHairType, facialHairColor,\n            clotheType, clotheColor, eyeType, eyebrowType, mouthType, skinColor} = this.props.disguise;\n        const data = [        // array = rows, array components = JSON key:value pairs\n        {component: \"topType\",      option: topType},\n        {component: \"hatColor\",     option: hatColor},\n        {component: \"accessoriesType\",  option: accessoriesType},\n        {component: \"hairColor\",        option: hairColor},\n        {component: \"facialHairType\",   option: facialHairType},\n        {component: \"facialHairColor\",  option: facialHairColor},\n        {component: \"clotheType\",   option: clotheType},\n        {component: \"clotheColor\",  option: clotheColor},\n        {component: \"eyeType\",      option: eyeType},\n        {component: \"eyebrowType\",  option: eyebrowType},\n        {component: \"mouthType\",    option: mouthType},\n        {component: \"skinColor\",    option: skinColor},\n    ];\n    const columns = [       // our table has 2 columns\n        {Header: \"AvatarComponent\", accessor: \"component\"},  // 'Header' is any string, 'accessor' matches the JSON key\n        {Header: \"Option\",          accessor: \"option\"}      // a dropdown menu to select an option of the component\n    ];\n    return (\n      <div>\n        <ReactTable                // ReactTable is a component \n          data={data}              // props for ReactTable\n          columns={columns}        // props for ReactTable\n          defaultPageSize={12}\n          className=\"-striped -highlight\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default OptionTable;\n","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/getWeb3.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/helpers.js",["58"],"// helper JavaScript functions of Dec 31, 2020\n// - under test, calling setState directly (incorrect design and doesn't work). \n// Not integrated yet with App.js\nimport getWeb3 from \"./getWeb3\";          // to call web3 API\nimport Pepito from \"./contracts_abi/Pepito.json\";                 // to call web3 API\n\nexport function tryIt () {\n    /**\n    * @notice simple trial helper functions for App.js\n    * @dev clean design: returns an object that App.js will insert in this.state\n    * @dev the text will be displayed in the button \"Generate disguise\"\n    * @dev tested and validated Dec 31 \n    */\n    return {myWord: ', please!'};\n}\n\n\nexport function getRandomDisguise(options) {\n    /** \n     * @notice set & return the disguise options based on random number\n     * @dev generate pseudo random values of uint32, to retrieve random disguise options\n     * @dev not truly random but good enough for demo purposes\n     * @dev tested and validated Dec 30\n    */\n    const getRandomValues = require(\"../node_modules/get-random-values\");\t/// @dev import JS random generator from npm\n    const array = new Uint32Array(1);\n    getRandomValues(array);               /// @dev fill array with random numbers\n    const randomBigNumber = array[0];     /// @dev use 1st random number in the array\n    /** @dev transform the random into ranks in the arrays */\n    const idxTopType = randomBigNumber % Object.values(options.topType).length;\n    const idxHatColor = randomBigNumber % Object.values(options.hatColor).length;\n    const idxAccessoriesType = randomBigNumber % Object.values(options.accessoriesType).length;\n    const idxHairColor = randomBigNumber % Object.values(options.hairColor).length;\n    const idxFacialHairType = randomBigNumber % Object.values(options.facialHairType).length;\n    const idxfacialHairColor = randomBigNumber % Object.values(options.facialHairColor).length;\n    const idxClotheType = randomBigNumber % Object.values(options.clotheType).length;\n    const idxClotheColor = randomBigNumber % Object.values(options.clotheColor).length;\n    const idxEyeType = randomBigNumber % Object.values(options.eyeType).length;\n    const idxEyebrowType = randomBigNumber % Object.values(options.eyebrowType).length;\n    const idxMouthType = randomBigNumber % Object.values(options.mouthType).length;\n    const idxSkinColor = randomBigNumber % Object.values(options.skinColor).length;\n\n    const disguise = {\n        randomBigNumber: randomBigNumber,\t/// @dev random number for use directly by getData()\n        idxTopType: idxTopType,\n        topType: options.topType[idxTopType],\n        idxHatColor: idxHatColor,\n        hatColor: options.hatColor[idxHatColor],\n        idxAccessoriesType: idxAccessoriesType,\n        accessoriesType: options.accessoriesType[idxAccessoriesType],\n        idxHairColor: idxHairColor,\n        hairColor: options.hairColor[idxHairColor],\n        idxFacialHairType: idxFacialHairType,\n        facialHairType: options.facialHairType[idxFacialHairType],\n        idxfacialHairColor: idxfacialHairColor,\n        facialHairColor: options.facialHairColor[idxfacialHairColor],\n        idxClotheType: idxClotheType,\n        clotheType: options.clotheType[idxClotheType],\n        idxClotheColor:idxClotheColor,\n        clotheColor: options.clotheColor[idxClotheColor],\n        idxEyeType: idxEyeType,\n        eyeType: options.eyeType[idxEyeType],\n        idxEyebrowType: idxEyebrowType,\n        eyebrowType: options.eyebrowType[idxEyebrowType],\n        idxMouthType: idxMouthType,\n        mouthType: options.mouthType[idxMouthType],\n        idxSkinColor: idxSkinColor,\n        skinColor: options.skinColor[idxSkinColor],\n    }\n    console.log(\"setRandomDisguise randomBigNumber\", randomBigNumber);\n    console.log(\"topType:\", disguise.topType, \", hatColor:\", disguise.hatColor, \", accessoriesType:\", disguise.accessoriesType);\n    console.log(\"clotheColor:\", disguise.clotheColor, \", eyeType:\", disguise.eyeType, \", eyebrowType:\", disguise.eyebrowType);\n    console.log(\"hairColor:\", disguise.hairColor, \", facialHairType:\", disguise.facialHairType, \", clotheType:\", disguise.clotheType);\n    console.log(\"mouthType:\", disguise.mouthType, \", skinColor:\", disguise.skinColor);\n    console.log(\"disguise\", disguise)\n    return disguise;\n}\n\nexport const makePepito = async () => {\n    /**\n     * @notice connect web3 API and create Pepito contract\n     * @dev not yet validated\n    */\n    try {\n        /// @dev access to blockchain via Metamask\n        /// @dev get network provider and web3 instance by trying several channels \n        const web3 = await getWeb3();\n        /// @dev ***** TODO: check error when getWeb3 returns, in case Matamask not connected\n        /// @dev use web3 to get the account of the user\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"0.user account\", accounts);\n  \n        /// @dev create a Pepito singleton contract instance\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Pepito.networks[networkId];\n        const pepitoInstance = new web3.eth.Contract(\n          Pepito.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        const ownerPepito = await pepitoInstance.methods.owner().call();\n        var web3Connect = true;\n  \n        /// @dev set web3, accounts, and contract to the state \n        const web3Pepito = { web3, accounts, contract: pepitoInstance, pepitoAddress: deployedNetwork.address, web3Connect, ownerPepito } \n        console.log(\"1.user account\", web3Pepito.accounts,\n            \".\\n 3.makePepito().Pepito contract\", web3Pepito.contract,\n            \".\\n  3.Pepito contract address\", web3Pepito.pepitoAddress,\n            \".\\n   3.web3Connect\", web3Pepito.web3Connect,\n            \".\\n    3.'owner' variable in Pepito\", web3Pepito.ownerPepito);\n        return web3Pepito;\n    } catch (error) {\n        /// @dev catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n    }\n}\n\nexport const storeDisguise = async () => {\n    /** \n    * @notice create a PepitoDisguise and store the options of this disguise\n    * @dev WIP - to be refined and tested in App.js before transferring here in helpers.js\n    */\n    const { accounts, contract, web3Connect, ownerPepito } = this.state;\n    console.log(\"storeDisguise, user account\", accounts,\n      \".\\n 2.storeDisguise, Pepito contract\", contract,\n      \".\\n  2.storeDisguise, web3Connect\", web3Connect,\n      \".\\n   2.storeDisguise, 'owner' variable in Pepito\", ownerPepito);\n\n    if(web3Connect){\n      const pepitoDisguise = await contract.methods.createPepitoDisguise();\n      /// @dev bug to be changed: pepitoDisguise is currently a transaction object, not an address\n      console.log(\"instance pepitoDisguise created by Pepito\", pepitoDisguise);\n      var HatColor = 1;    //  test value, should be the rank in the array of HatColor\n      await pepitoDisguise.methods.setHatColor().call({ from: accounts[0] });\n      const storedDisguise = await pepitoDisguise.methods.storedDisguise().call();\n      console.log(\"storedDisguise\", storedDisguise);\n\n      /* \n      await pepitoDisguise.methods.setTopType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setHatColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setAccessoriesType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setHairColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setFacialHairType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setFacialHairColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setClotheType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setClotheColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setEyeType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setEyebrowType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setMouthType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setSkinColor().call({ from: accounts[0] });\n      */\n    } else alert(\"Please reload page first, to get connected to local blockchain\");\n}\n",["59","60"],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/Disguise.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DisguiseControls.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/MakePepito.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DisguiseStore.js",["61","62","63"],"/**  class DisguiseStore - project Pepito \n * @author Vu Tien Khang - Jan 2021\n * @notice send transaction to deploy a disguiseContract and\n * @notice set the disguise state variable of this contract\n * @dev disguiseCount1 = count of disguises, in [1,n], because disguiseCount using safeMath not working yet\n*/\nimport React from 'react';\nimport './App.css';\nimport PepitoDisguise from \"./contracts_abi/PepitoDisguise.json\";   // to call web3 API\n\nclass DisguiseStore extends React.Component{\n    constructor() {\n        super();\n    }\n\n    storeDisguise = async () => {\n        const web3Connected = this.props.web3Connected;\n        //console.log(\"--> 2.storeDisguise, web3Connected\", web3Connected);\n      \n        if(web3Connected){      // TODO: add a try-catch here\n            /** @dev    get the Factory contract */\n            const pepitoInstance = this.props.pepitoInstance;\n            //console.log(\"      2.storeDisguise.Pepito instance\", pepitoInstance);            \n\n            /** @dev    tell the Factory contract to deploy a PepitoDisguise contract */\n            const disguiseReceipt = await pepitoInstance.methods.createPepitoDisguise()\n                .send({from: this.props.ownerPepito});\n            //console.log('   2.storeDisguise-state.disguiseReceipt', disguiseReceipt)\n            \n            /** @dev    obtain latest array of all disguise addresses, using event of type PepitoDisguiseCreated\n             * note that in the way Pepito contract increments the disguiseCount, its value is in the range [1,n]\n             */\n            const lastEvent = await pepitoInstance.getPastEvents('PepitoDisguiseCreated', {});\n            const disguiseCount = lastEvent[0].returnValues.disguiseCount;\n            this.disguiseCount1 = lastEvent[0].returnValues.disguiseCount1;\n            const disguiseAddresses = lastEvent[0].returnValues.disguiseAddresses;\n            const disguiseAddress = lastEvent[0].returnValues.disguiseAddresses[this.disguiseCount1-1];\n            console.log('...     2.storeDisguise.lastEvent, count =', disguiseCount,\n                ', count1 =', this.disguiseCount1, \n                ', disguise addresses', disguiseAddresses);\n\n            /** @dev    build the array of options of features of this disguise to store it\n             * @dev     today we hard-code the features and their options to reduce blockchain storage\n             * @dev     when we'll be on IPFS, we'll use key-value pairs\n             */\n            const {idxTopType, idxHatColor, idxAccessoriesType, idxHairColor, idxFacialHairType, idxFacialHairColor,\n                idxClotheType, idxClotheColor, idxEyeType, idxEyebrowType, idxMouthType, idxSkinColor} = this.props.idxDisguise;\n            const disguise2store = [idxTopType, idxHatColor, idxAccessoriesType, idxHairColor, idxFacialHairType, idxFacialHairColor,\n                idxClotheType, idxClotheColor, idxEyeType, idxEyebrowType, idxMouthType, idxSkinColor];\n            console.log('        2.storeDisguise.disguise2store =', disguise2store);\n            /** Note: we could also make a single string of 24 characters with the 12 numbers by using string cat on\n                const pad2 = (num) => String(num).padStart(2, '0');\n                const disguise2store = pad2(idxTopType)+pad2(idxHatColor)+pad2(idxAccessoriesType) etc. */\n\n            /** @dev    return to App.js the count of disguises, their addresses & the disguise's options */\n            this.props.deployedDisguise(this.disguiseCount1, disguiseAddresses, disguise2store);\n\n            /** create with web3 a connection to the last pepitoDisguise; */\n            const pepitoDisguise = new this.props.web3.eth.Contract(\n                    PepitoDisguise.abi,\n                    disguiseAddress,\n            );\n            /** @dev tell the PepitoDisguise contract to store the array of indexes of its features */\n            const storeDisguiseReceipt = await pepitoDisguise.methods.storeDisguise(disguise2store)\n                .send({from: this.props.ownerPepito });\n            //console.log(\"stored Disguise\", storeDisguiseReceipt, disguise2store);\n            \n      \n        } else alert(\"Please get first the blockchain interface & Pepito credentials\");  \n    }\n\n    render() {\n        return(\n            <>\n                <span>Hint: better not store twice the same disguise :)</span>\n                <button className=\"btn btn-lg btn-secondary mb-5\" \n                    onClick={this.storeDisguise}>Store disguise on blockchain\n                </button>\n                <span>, currently... {this.disguiseCount1}</span>\n            </>\n        )\n    }\n}\n\nexport default DisguiseStore;","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DisguiseRetrieve.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/DrawAvataar.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":12,"column":5,"nodeType":"70","messageId":"71","endLine":14,"endColumn":6},{"ruleId":"72","severity":1,"message":"73","line":135,"column":11,"nodeType":"74","messageId":"75","endLine":135,"endColumn":19},{"ruleId":"64","replacedBy":"76"},{"ruleId":"66","replacedBy":"77"},{"ruleId":"68","severity":1,"message":"69","line":12,"column":5,"nodeType":"70","messageId":"71","endLine":14,"endColumn":6},{"ruleId":"72","severity":1,"message":"78","line":26,"column":19,"nodeType":"74","messageId":"75","endLine":26,"endColumn":34},{"ruleId":"72","severity":1,"message":"79","line":64,"column":19,"nodeType":"74","messageId":"75","endLine":64,"endColumn":39},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'HatColor' is assigned a value but never used.","Identifier","unusedVar",["80"],["81"],"'disguiseReceipt' is assigned a value but never used.","'storeDisguiseReceipt' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]